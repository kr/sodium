#!/usr/bin/env python2.5

import sys
from getopt import getopt

from pair import cons, nil
import reader
import lx

from util import report_compile_error

def basename(name):
  return name[:name.find('.')]

def read_file(n):
    return reader.read(open(n).read(), n)

opts, args = getopt(sys.argv[1:], 'btco:', [
        'bare',
        'thunk',
        'generate-c',
        'output=',
        ])

infile = args[0]
outfile = None
gen_c = False
use_thunk = True

for opt, val in opts:
    if opt in ('--generate-c', '-c'):
        gen_c = True
    elif opt in ('--thunk', '-t'):
        use_thunk = True
    elif opt in ('--bare', '-b'):
        use_thunk = False
    elif opt in ('--output', '-o'):
        outfile = val

if outfile is None:
  if gen_c:
    outfile = infile + '.c'
  else:
    outfile = infile + 'c'

if len(sys.argv) < 2:
    print 'please give me a flie'
    sys.exit()

exps = read_file(infile)
if use_thunk:
    # ((fn () ...))
    exp = cons(cons(lx.fn_s, cons(nil, exps)), nil)
else:
    # (do ...)
    exp = cons(lx.do_s, exps)

try:
  code = lx.compile(exp, lx.S('val'), lx.S('next'), nil, lx.S('pop-all-top'))
  outfd = open(outfile, 'w')
  if gen_c:
      if not outfile.endswith('.c'): raise 'bad output file name', outfile
      code.gen_c(basename(infile), outfd)
  else:
      code.assemble(outfd)
except lx.CompileError, ex:
  report_compile_error(ex, file=infile)
