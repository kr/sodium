def reaper: sobj:
  (run.):
      if (is? self.state 'dead):
        self.set-state 'finalized
        self.object.finalize # this may re-register the object

  (find.):
      if (is? self.state 'dead): return self
      self.cdr-find

  (cdr-find.):
      if (is? self.cdr '()): return '()
      self.cdr.find

  (clean.):
      self.set-cdr! self.cdr-clean
      if (is? self.state 'finalized): return self.cdr
      self

  (cdr-clean.):
      if (is? self.cdr '()): return '()
      self.cdr.clean

  (find-object x):
      if (is? self.object x): return self
      if (is? self.cdr '()): return '()
      return (self.cdr.find-object x)

  inline C (function.) <<end
    return (datum) rcv[2];
  end

  (car.) self

  inline C (cdr.) <<end
    return (datum) rcv[1];
  end

  inline C (object.) <<end
    return (datum) rcv[0];
  end

  inline C (state.) <<end
    return (datum) rcv[2];
  end

  inline C (set-cdr! new) <<end
    return (datum) (rcv[1] = (size_t) n_new);
  end

  inline C (set-state new) <<end
    return (datum) (rcv[2] = (size_t) n_new);
  end

  (run-finalizers.):
      x = self.cdr-find
      if (not x): return 'ok
      x.
      self.run-finalizers

  # This should only be called on the head of fz_list.
  (reap.):
      self.run-finalizers
      self.clean

def install: obj:
  inline C (run x) <<end
    install_fz(&n_x);
    return nil;
  end

def first-reaper: obj:
  inline C (run.) <<end
    return first_reaper();
  end

def manager: obj:
  (register x):
    r = (first-reaper.run.find-object x)
    if r: return (r.set-state 'live)
    install x

manager
