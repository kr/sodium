#!/usr/bin/env python2.4

import sys
import lx
from reader import read
from typ import S

def read_file(n):
    return read(open(n).read())

def print_ex(e):
    print 'error:', e.__class__, e

exps = read_file('prelude.lx')
lx.eval_sequence(exps, lx.global_env)

resolve_symbol = S('resolve')

if len(sys.argv) == 1:
    while True:
        sys.stdout.write('? ')
        line = sys.stdin.readline()
        if not line: print; break
        try:
            exps = read(line)
        except Exception, e:
            print 'error:', e
            continue
        if len(exps) > 1: raise 'unexpected'
        if len(exps) < 1: continue
        try:
            print lx.rep(lx.eval(exps[0], lx.global_env))
        except Exception, e:
            print_ex(e)
else:
    exps = read_file(sys.argv[1])
    for exp in exps:
        try:
            #lx.eval_sequence(exps, lx.global_env)
            lx.eval(exp, lx.global_env)
        except Exception, e:
            print_ex(e)
    while lx.work_left():
        rcv, msg, args, resolver = lx.get_task()
        value = lx.call(rcv, msg, args)
        lx.call(resolver, resolve_symbol, (value,))

