
#load-module (unit-test T) run-all should shouldnt
def T (load-module unit-test)
def run-all (T :run-all)
def should (T :should)
def shouldnt (T :shouldnt)

def (make-tester):
  def empty '()
  def single '()

  obj ():
    (set-up):
      empty :: '()
      single :: '(4)
  
    (test-car):
      #should [4 = (single:car)]
      should (fn () (4 = (single :car)))
  
    (test-map-empty):
      def (f x) x
      #should [is? (empty:map f) '()]
      should (fn () (is? (empty :map f) '()))

    (test-equal):
      should (fn () (single = '(4)))

run-all (make-tester)
pr "done"
