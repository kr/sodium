# All str objects use UTF-8 for the internal representation.
# For now, all str objects are restricted to the set of 7-bit ASCII chars.

inline C <<end

#include <string.h>

#include "bytes.h"
#include "prim.h"

static datum percent_star_sym;

void
str_init()
{
    percent_star_sym = intern("%*:1");
}

int
strp(datum x)
{
    return !(((size_t)x)&1) && ((datum) x[-1]) == str_mtab;
}

datum
make_str(size_t size)
{
    return make_opaque(size, str_mtab);
}

datum
make_str_init(size_t size, const char *bytes)
{
    datum s = make_str(size);
    memcpy(s, bytes, size);
    return s;
}

datum
make_str_init_permanent(size_t size, const char *bytes)
{
    datum s = make_opaque_permanent(size, str_mtab);
    memcpy(s, bytes, size);
    return (datum) s;
}

size_t
copy_str_contents(char *dest, datum s, size_t n)
{
    if (datum_size(s) < n) n = datum_size(s);
    memcpy(dest, s, n);
    return n;
}

size_t
copy_str_contents0(char *dest, datum str, size_t n)
{
    n = copy_str_contents(dest, str, n - 1);
    dest[n] = 0;
    return n + 1;
}

int
str_cmp_charstar(datum str, size_t len, const char *s)
{
    int r;

    r = strncmp((char *) str, s, datum_size(str));
    if (r) return r;
    return datum_size(str) - len;
}

end

def str: sobj:
  inline C (/ x) <<end
    /* concatenate */
    datum s;
    size_t az = datum_size(rcv), bz = datum_size(n_x);
    char s1[az], s2[bz];

    copy_str_contents(s1, rcv, az);
    copy_str_contents(s2, n_x, bz);

    s = make_opaque(az + bz, str_mtab);
    memcpy(s, s1, az);
    memcpy(((char *) s) + az, s2, bz);

    return s;
  end

  inline C (run i) <<end
    /* index a single char */
    int i;
    char s[2];

    if (!intp(n_i)) die("str -- expected int");
    i = datum2int(n_i);
    s[0] = ((char *) rcv)[i];
    s[1] = '\0';
    return make_str_init(1, s);
  end

  inline C (encode.) <<end
    return make_bytes_init_len((char *) rcv, datum_size(rcv));
  end

  inline C (length.) <<end
    return int2datum(datum_size(rcv));
  end

  inline C (== x) <<end
    size_t i, rcv_size = datum_size(rcv), n_x_size = datum_size(n_x);

    if (rcv_size != n_x_size) return nil;

    for (i = 0; i < rcv_size; i++) {
        if (((char *) rcv)[i] != ((char *) n_x)[i]) return nil;
    }
    return int2datum(1);
  end

  inline C (substring start end) <<end
    int start, end;

    start = datum2int(n_start);
    if (start < 0) start = 0;

    end = datum2int(n_end);
    if (end > datum_size(rcv)) end = datum_size(rcv);

    {
        int i, j;
        char new[end - start + 1];
        for (i = 0, j = start; j < end; i++, j++) {
            new[i] = ((char *) rcv)[j];
        }
        new[i] = '\0';
        return make_str_init(end - start, new);
    }
  end

  (tail n) (self.substring n (self.length))
  (head n):
    self.substring 0 n

  (starts-with? sub):
    (self.head (sub.length)) == sub

  (find-from n sub):
    def (helper s i):
      if ((s.length) < (sub.length)):
        i + (s.length)
      else:
        if (s.starts-with? sub):
          . i
        else:
          helper (s.tail 1) (i + 1)
    helper (self.tail n) n

  (find sub):
    self.find-from 0 sub

  # (% . a):
  #   pr "in %"
  #   def i (self.find "%")
  #   if (not i):
  #     . self
  #   else:
  #     if ((self 0) == "%"):
  #       (format (self 1) (a.car)) / ((self.tail 2) % . (a.cdr))
  #     else:
  #       (self.head i) / ((self.tail i) % . a)

  (%* a):
    def (format code val):
      if (inspect.same-type? val ""): return val
      format code val.str

    def l (self.length)
    def i (self.find "%")
    if (is? i l):
      . self
    else:
      if ((self 0) == "%"):
        (format (self 1) (a.car)) / ((self.tail 2).%* (a.cdr))
      else:
        (self.head i) / ((self.tail i).%* a)

  inline C (% . args) <<end
    regs[R_VM0] = rcv;
    args = cons(args, nil);
    return call(regs[R_VM0], percent_star_sym, args);
  end

  inline C (intern.) <<end
    return intern_str(rcv);
  end

  (frozen.) self

. '()
