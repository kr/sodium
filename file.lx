inline C <<end
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
#include <string.h>
#include <sys/stat.h>

static datum read_sym, write_sym;

static size_t
fsize(int f)
{
    int r;
    struct stat sbuf;

    r = fstat(f, &sbuf);
    if (r) die("fsize -- cannot stat");
    return sbuf.st_size;
}

end

def intern-syms ():
  inline C (run) <<end
    read_sym = intern("read");
    write_sym = intern("write");
    return ok_sym;
  end

def file ():
  (run name flags):
    def f ():
      inline C (read) <<end
        int r;
        uint len;
        datum bytes;
        int f = (int) ((chunk) rcv)->datums[2];
        char *s;

        if (!f) die("f:read -- this file is closed");
        len = fsize(f);
        bytes = make_bytes(len + 1);
        for (s = bytes_contents(bytes); len; len -= r) {
            r = read(f, s, len);
            if (r < 1) die("read() error");
            /* TODO better error checking */
            s += r;
        }
        *s = '\0';
        return bytes;
      end

      inline C (write s) <<end
        int r;
        uint len;
        int f = (int) ((chunk) rcv)->datums[2];
        char *s;

        if (!f) die("f:write -- this file is closed");
        s = bytes_contents(n_s);
        for (len = strlen(s); len; len -= r) {
            r = write(f, s, len);
            if (r < 1) die("write() error");
            /* TODO better error checking */
            s += r;
        }
        return ok_sym;
      end

      inline C (close) <<end
        int r;
        int f = (int) ((chunk) rcv)->datums[2];

        if (f) {
            r = close(f);
            if (-1 == r) die("close() error");
            ((chunk) rcv)->datums[2] = 0;
        }
        return ok_sym;
      end

      inline C (prepare) <<end
        int f;
        int flags = O_RDONLY;

        // Get flags
        if (n_flags == write_sym) {
            flags = O_WRONLY;
        } else if (n_flags != read_sym) {
            return die1("f:prepare -- unknown flags", n_flags);
        }

        f = open(bytes_contents(n_name), flags);

        return grow_closure(&rcv, 1, (na_fn_free) close, (void *) f);
      end

    f.prepare

intern-syms
. file
